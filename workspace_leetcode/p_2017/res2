// https://leetcode.com/problems/grid-game/

class Solution {
    public long gridGame(int[][] grid) {
        int n = grid[0].length;

        // build a sum matrix:
        // first row from right to left
        // second row from left to right
        long[][] sumGrid = new long[2][n];
        sumGrid[0][n - 1] = grid[0][n - 1];
        for (int i = n - 2; i >= 0; --i) {
            sumGrid[0][i] = sumGrid[0][i + 1] + grid[0][i];
        }

        sumGrid[1][0] = grid[1][0];
        for (int i = 1; i < n; ++i) {
            sumGrid[1][i] = sumGrid[1][i - 1] + grid[1][i];
        }

        long minMax = findMax(grid, sumGrid, 0);
        for (int i = 1; i < n; ++i) {
            minMax = Math.min(minMax, findMax(grid, sumGrid, i));
        }

        return minMax;
    }

    private long findMax(int[][] grid, long[][] sumGrid, int t) {
        int n = grid[0].length;

        long sum1 = t < n - 1 ? sumGrid[0][t + 1] : 0;
        long sum2 = t > 0 ? sumGrid[1][t - 1] : 0;

        return Math.max(sum1, sum2);
    }
}
