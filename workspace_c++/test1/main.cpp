#include <iostream>
#include <string>
#include <vector>
#include <limits.h>
#include <fstream>
#include <set>
#include <thread>
#include <pthread.h>
#include <map>
#include <unordered_map>
#include <iomanip>
#include <deque>
#include <memory>
#include <algorithm>

using namespace std;

void test1() {
    string alphabet = "abcdefghijklmnopqrstuvwxyz";
    size_t i = alphabet.size();
    while (i--) {
        cout << alphabet[i] << endl;;
    }
}

void test2() {
    vector<string> v1 = {"a", "b", "c"};
    vector<string> v2 = {"b", "c", "d"};
    v2.insert(v2.end(), v1.begin(), v1.end());
    for (auto i = v2.cbegin(); i != v2.cend(); ++i) {
        cout << *i << endl;
    }
}

class Spell {
    private:
        string scrollName;
    public:
        Spell(): scrollName("") { }
        Spell(string name): scrollName(name) { }
        virtual ~Spell() { }
        string revealScrollName() {
            return scrollName;
        }
};

class Fireball : public Spell {
    private: int power;
    public:
        Fireball(int power): power(power) { }
        void revealFirepower() {
            cout << "Fireball: " << power << endl;
        }
};

class Frostbite : public Spell {
    private: int power;
    public:
        Frostbite(int power): power(power) { }
        void revealFrostpower() {
            cout << "Frostbite: " << power << endl;
        }
};

class Thunderstorm : public Spell {
    private: int power;
    public:
        Thunderstorm(int power): power(power) { }
        void revealThunderpower() {
            cout << "Thunderstorm: " << power << endl;
        }
};

class Waterbolt : public Spell {
    private: int power;
    public:
        Waterbolt(int power): power(power) { }
        void revealWaterpower() {
            cout << "Waterbolt: " << power << endl;
        }
};

class SpellJournal {
    public:
        static string journal;
        static string read() {
            return journal;
        }
};
string SpellJournal::journal = "";

void counterspell(Spell *spell) {
    /* Enter your code here */
    if (Fireball* s = dynamic_cast<Fireball*>(spell)) {
        s->revealFirepower();
    } else if (Frostbite* s = dynamic_cast<Frostbite*>(spell)) {
        s->revealFrostpower();
    } else if (Thunderstorm* s = dynamic_cast<Thunderstorm*>(spell)) {
        s->revealThunderpower();
    } else if (Waterbolt* s = dynamic_cast<Waterbolt*>(spell)) {
        s->revealWaterpower();
    } else {
        vector<string> v;
        vector<size_t> vi;

        string sName = spell->revealScrollName();
        string jName = SpellJournal::journal;

        for (auto i = sName.cbegin(); i != sName.cend(); ++i) {
            size_t ji = 0;
            vector<string> tv;
            vector<size_t> tvi;

            while ((ji = jName.find(*i, ji)) != string::npos) {
                bool found = false;
                for (size_t n = 0; n < vi.size(); ++n) {
                    if (ji > vi[n]) {
                        found = true;
                        string cur = v[n] + *i;
                        tv.push_back(cur);
                        tvi.push_back(ji);
                    }
                }
                if (!found) {
                    string seq = "";
                    seq.push_back(*i);
                    tv.push_back(seq);
                    tvi.push_back(ji);
                }
                ji++;
            }
            v.insert(v.end(), tv.cbegin(), tv.cend());
            vi.insert(vi.end(), tvi.cbegin(), tvi.cend());
        }

        size_t maxSeq = 0;
        for (auto i = v.cbegin(); i != v.cend(); ++i) {
            if ((*i).size() > maxSeq) {
                maxSeq = (*i).size();
            }
        }
        cout << maxSeq << endl;
    }
}

class Wizard {
    public:
        Spell *cast() {
            Spell *spell;
            string s; cin >> s;
            int power; cin >> power;
            if(s == "fire") {
                spell = new Fireball(power);
            }
            else if(s == "frost") {
                spell = new Frostbite(power);
            }
            else if(s == "water") {
                spell = new Waterbolt(power);
            }
            else if(s == "thunder") {
                spell = new Thunderstorm(power);
            }
            else {
                spell = new Spell(s);
                cin >> SpellJournal::journal;
            }
            return spell;
        }
};

int test3() {
    /**
     *
     *  Test inputs:
     *  10
        thunder 48096
        faPkdmElxiyjROOhuFHbaKpmmVAXQcPTiwtCiJC 28248 BVObzwbRESpqhpvjiDGmlVJ
        frost 67386
        fbiNbSjyFGXofbuNXGMhJNkDhhWzjAQQHXJuREWcpKtFZGxdHEUUyfRCmqxykCxJA 95277 OtSUtXkEDqSOYo
        water 9241
        zrWyPgdQNfbxYwblqVDuFgg 41156 BSkBUrnGiyXtrauVHXjepOsNzHCBxlKCcZhvPxDBmEGacemoreZpCsNlzBBIaSS
        thunder 64405
        noeIkFrhKXerEdMmSUoWKsDtOOnTwoRSWVEDDDfXrsZLDavzFmKjbOLACcJWiafftBPrHrDcBcWpm 2583 zWOgnrlJtbBabVEiHFeDopplrynLWeGaIBzusjysQFdGmYbDecojmkkivJqxlNahSZjJMKTAKjMfxAquIc
        mTnzepygwRtKHXpfhlJERNMbSFpXwydcsnPPy 88529 BWHFActuaAWqPIMwwvLFKkKcQyBuIopancVKxFItfLLdFlglsRjAY
        QivcjGDoqoZKuiDcFHqRBdtuPRrisYZoSyQuERxvPiYZNfbWTZHqwLiCeebfYSAgSZiOc 92226 OAAeqEXEmijuQqDEDYBlklSWURxcLxHlFBYuWSWMYHWJVHXigdjohAundoufZ

        Expected outputs:
        Thunderstorm: 48096
        6
        Frostbite: 67386
        5
        Waterbolt: 9241
        6
        Thunderstorm: 64405
        18
        6
        15
     */
    int T;
    cin >> T;
    Wizard Arawn;
    while(T--) {
        Spell *spell = Arawn.cast();
        counterspell(spell);
    }
    return 0;
}

void test4() {
    cout << "INT_MAX " << INT_MAX << endl;
    cout << "UINT_MAX " << UINT_MAX << endl;
    cout << "LONG_MAX " << LONG_MAX << endl;
    cout << "ULONG_MAX " << ULONG_MAX << endl;

    cout << (10^9) - INT_MAX << endl;
}

void test5() {
   vector<int> s;
   s.push_back(1);
   s.push_back(2);
   s.push_back(3);
   s.pop_back();
   for (auto v = s.cbegin(); v != s.cend(); ++v) {
       cout << *v << endl;
   }
}

size_t partition(vector<int>& s, size_t lo, size_t hi) {
    int pivot = s[(lo + hi) / 2];

    size_t i = lo - 1;
    size_t j = hi + 1;

    while (true) {
        do {
            i++;
        } while (s[i] < pivot);

        do {
            j--;
        } while (s[j] > pivot);

        if (i >= j) {
            return j;
        }

        int t = s[i];
        s[i] = s[j];
        s[j] = t;
    }
}

/**
 * @brief quickSort
 * @param s
 * @param lo
 * @param hi
 *
 * Pro: less space
 * Con: Doesn't keep the original order of duplicate items
 */
void quickSort(vector<int>& s, size_t lo, size_t hi) {
    if (lo >= hi) {
        return;
    }

    size_t p = partition(s, lo, hi);
    quickSort(s, lo, p);
    quickSort(s, p + 1, hi);
}

void test6() {
    // test quick sort
    vector<int> s[] = {
        {2, 6, 4, 3, 1, 9, 8, 7, 7},
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
        {10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
        {22, 23, 22, 22, 22, 22, 22, 22, 22, 22}
    };

    for( auto i: s) {
        quickSort(i, 0, i.size() - 1);
        for (const auto v: i) {
            cout << v << ' ';
        }
        cout << endl;
    }
}

void test7() {
    const int a[] = {0, 1, 3, 5, 7, 9};
    vector<int> v(a, a + 6);

    for (auto i : v) {
        cout << i << ' ';
    }

    cout << endl << *(v.end() - 1) << endl;

    auto lo = lower_bound(v.begin(), v.end(), 6);
    if (lo == v.end()) {
        cout << "out of bound" << endl;
    } else {
        cout << *lo << endl;
    }
}

void testPrime() {
    ofstream file;
    file.open("/home/lchen/workspace_c++/test1/prime");
    vector<unsigned long long> primes;
    for (unsigned long long i = 2; i < ULLONG_MAX; i++) {
        if (i == 2 || i == 3 || i == 5 || i == 7) {
            primes.push_back(i);
            cout << i << endl;
            file << i << endl;
            continue;
        }

        if (i % 2 == 0) {
            continue;
        }

        if (i % 3 == 0) {
            continue;
        }

        if (i % 5 == 0) {
            continue;
        }

        if (i % 7 == 0) {
            continue;
        }

        // Assuming all non-prime numbers are divisible by a prime number
        // https://math.stackexchange.com/questions/911655/why-are-all-non-prime-numbers-divisible-by-a-prime-number
        bool isPrime = true;
        for (auto j = primes.begin(); j != primes.end(); j++) {
            if (i % *j == 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            primes.push_back(i);
            cout << i << endl;
            file << i << endl;
        }

        if (i % 100000 == 0) {
            file.flush();
        }
    }
    file.close();
}

void merge(vector<int>& v, size_t llo, size_t mid, size_t rhi) {
    if ((mid - llo <= 0) && (rhi - mid <= 0)) {
        return;
    }

    vector<int> t;
    
    size_t lIndex = llo;
    size_t rIndex = mid;
    while ((mid - lIndex > 0) && (rhi - rIndex > 0)) {
        if (v[lIndex] < v[rIndex]) {
            t.push_back(v[lIndex++]);
        } else {
            t.push_back(v[rIndex++]);
        }
    }

    while (mid - lIndex > 0) {
        t.push_back(v[lIndex++]);
    }
    while (rhi - rIndex >0) {
        t.push_back(v[rIndex++]);
    }

    for (size_t i = 0; i < t.size(); i++) {
        v[llo + i] = t[i];
    }
}

/**
 * @brief mergeSort
 * @param v
 * @param lo
 * @param hi
 *
 * Pro:
 * Keep original order of duplicate items
 * Con:
 * Extra space N
 */
void mergeSort(vector<int>& v, size_t lo, size_t hi) {
    if (hi - lo <= 1) {
        return;
    }
    
    const size_t mid = (lo + hi) / 2;
    mergeSort(v, lo, mid);
    mergeSort(v, mid, hi);
    
    merge(v, lo, mid, hi);
}

void test8() {
    // test merge sort
    vector<int> a[] {
        {32, 1, 223, 1, 323, 3, 23, 3, 23, 32, 23, 3, 2, 3, 2, 2, 2, 22, 22, 3, 2345, 475, 7, 5},
        {8, 75, 27, 233, 67, 4423, 33, 5, 3, 335, 35, 7, 53, 345, 34, 6, 567, 35, 8, 23, 35, 56, 7, 35, 36, 3, 75, 7, 8, 2, 4, 5, 4, 6, 3, 3, 54},
        {29, 25, 21, 19, 11, 9, 8, 7, 6, 3, 2, 1}
    };

    size_t n = sizeof(a) / sizeof(a[0]);
    for (size_t i = 0; i < n; i++) {
        mergeSort(a[i], 0, a[i].size());
        for (auto j = a[i].cbegin(); j != a[i].cend(); j++) {
            cout << *j << ' ';
        }
        cout << endl;
    }
}

void test9() {
    vector<int> v = {29, 25, 21, 19, 11, 9, 8, 7, 6, 3, 2, 1};
    vector<int> v1(v.begin(), v.begin() + 5);
    for (auto i = v1.begin(); i != v1.end(); ++i) {
        cout << *i << ' ';
        *i = 1;
    }
//    for (int i = 0; i < v1.size(); i++) {
//        cout << v1[i] << ' ';
//        v1[i] = 1;
//    }
    cout << endl;
    for (auto i = v1.begin(); i != v1.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
    for (auto i = v.begin(); i != v.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

class Repre {
public:
    string name;
};

void test10() {
    Repre a;
    a.name = "aaa";
    Repre& b = a;
    cout << a.name << endl;
    b.name = "bbb";
    cout << a.name << endl;
    b = Repre();
    b.name = "ccc";
    cout << a.name << endl;

    Repre&& c = Repre();\
    c.name = "cc1";
    cout << c.name << endl;
}

void test11() {
    // move constructor
    vector<int> a = {3, 2, 4, 5, 7, 9};
    cout << "a: ";
    for (auto i = a.begin(); i != a.end(); i++) {
        cout << *i << ' ';
    }
    cout << endl;
    vector<int> b(std::move(a));
    cout << "a: ";
    for (auto i = a.begin(); i != a.end(); i++) {
        cout << *i << ' ';
    }
    cout << endl;
    cout << "b: ";
    for (auto i = b.begin(); i != b.end(); i++) {
        cout << *i << ' ';
    }
    cout << endl;
}

bool compareint(string l, string r) {
    if (l.at(0) < r.at(0)) {
        return false;
    } else {
        return true;
    }
}



void test12() {
    set<string> s;
    s.insert("dog");
    s.insert("cat");
    s.insert("horse");

    for(auto i = s.begin(); i != s.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;

//    set<string> w(comparestr, std::allocator<string>);
}

void test13t(int&& a) {
    cout << "non-const rvalue reference " << a << endl;
    a = 9;
    cout << "non-const rvalue reference " << a << endl;
    int c = 10;
    int& b = c;
    int&& d = 11;
    d = b;
    d = c;
    d = a;
    cout << "non-const rvalue reference " << a << endl;
}

void test13t(int& a) {
    cout << "non-const lvalue reference " << a << endl;
    a = 9;
    cout << "non-const lvalue reference " << a << endl;
    int c = 10;
    int& b = c;
    a = b;
    cout << "non-const lvalue reference " << a << endl;
}

void test13() {
    int a = 8;
    test13t(a);
    test13t(8);
}

class B {
public:
    B() {
        cout << "default B" << endl;
    }

    B(const B& b) {
        cout << "copy b" << endl;
        this->a = b.a;
    }

    B(B&& b) {
        cout << "move b" << endl;
        this->a = b.a;
        b.a = 0;
    }

    int a = 0;
};

class C {
public:
    C() {
        b.a = 100;
    }

    B getB() {
        return b;
    }

    B getMovedB() {
        return std::move(b);
    }

    B b;
};

B getB() {
    B b;
    B c;
    cout << &b << endl;
    cout << &c << endl;
    bool a = true;
    if (a) {
        return b;
    } else {
        return c;
    }
}

B& getBF() {
    B* b = new B();
    b->a = 6;
    return *b;
}

B getBFromC() {
    C c;
    c.b.a = 99;
    return c.b;
}

B getBMovedC() {
    C c;
    c.b.a = 98;
    return std::move(c.b);
}

void test15() {
    // default con and RVO
    B b2 = getB();
    cout << &b2 << endl;
    b2.a = 5;
    cout << b2.a << endl;

    // default con and copy
    B b3 = getBF();
    cout << b3.a << endl;

    // default con and move
    B b4 = std::move(getBF());
    cout << b4.a << endl;

    // move
    B b5 = std::move(b4);
    cout << b4.a << endl;
    cout << b5.a << endl;

    // equals to move
    B b6 = static_cast<B&&>(b5);
    cout << b5.a << endl;
    cout << b6.a << endl;

    // default con and no RVO
    C c;
    B b7 = c.getB();
    cout << c.b.a << endl;
    cout << b7.a << endl;

    // default con and move
    C c2;
    B b8 = c2.getMovedB();
    cout << c2.b.a << endl;
    cout << b8.a << endl;

    // default con and no RVO
    B b9 = getBFromC();
    cout << b9.a << endl;

    // default con and move
    B b10 = getBMovedC();
    cout << b10.a << endl;
}

void test16() {
//    std::thread t([] { cout << "test thread" << endl; });
//    t.join();
}

void test17() {
    map<string, int> m;
    m.insert(pair<string, int>("BBB", 2));
    m.insert(pair<string, int>("CCC", 3));
    m.insert(pair<string, int>("AAA", 1));
    for (auto i = m.cbegin(); i != m.cend(); ++i) {
        cout << i->first << '=' << i->second << endl;
    }

    unordered_map<string, int> m2;
    m2.insert(pair<string, int>("BBB", 2));
    m2.insert(pair<string, int>("CCC", 3));
    m2.insert(pair<string, int>("AAA", 1));
    for (auto i = m2.cbegin(); i != m2.cend(); ++i) {
        cout << i->first << '=' << i->second << endl;
    }
}

int test18() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    enum QUERY {
        ADD = 1,
        ERASE,
        GET
    };

    unordered_map<string, int> m;
    int numQ;
    cin >> numQ;

    int q;
    string name;
    int mark;
    while(numQ--) {
        cin >> q;
        if (q == ADD) {
            cin >> name >> mark;
            auto i = m.find(name);
            if (i != m.end()) {
                mark += i->second;
            }
            m[name] = mark;
        } else if (q == ERASE) {
            cin >> name;
            m.erase(name);
        } else if (q == GET) {
            cin >> name;
            auto i = m.find(name);
            if (i != m.end()) {
                cout << i->second << endl;
            } else {
                cout << '0' << endl;
            }
        }
    }
    return 0;
}

void test19() {
    cout << setiosflags(ios::uppercase);
    cout << setw(0xf) << internal;

    double a = 28473348240.706573486328;
    double b = 25255936.905333388597;
    double c = 561062869105.690063476562;
    cout << setw(0);
    cout << std::left;
        if (a == 0) {
            cout << "0x0" << endl;
        } else {
            cout << std::nouppercase << std::showbase << std::hex << static_cast<long long int>(a) << endl;
        }
    cout << std::right;
    cout << std::dec;
    cout << std::showpos << std::setfill('_') << std::setw(15) << std::fixed << std::setprecision(2) << b << endl;
    cout << std::noshowpos;
    cout << setw(0);
    cout << std::left;
    cout << std::uppercase << std::fixed << std::setprecision(9) << std::scientific << c << endl;

}

void test20() {
    int arr[] = {8, 7, 22, 33, 1, 12, 93, 13};
    deque<int> d(arr, arr + 8);
    d.push_back(2);
    for (auto i = d.cbegin(); i != d.cend(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

void printKMax(int arr[], int n, int k) {
    if (n < k) {
        return;
    }

    deque<int> d(arr, arr + k - 1);
    int max;
    for (int i = k - 1; i < n; ++i) {
        max = 0;
        d.push_back(arr[i]);
        for (auto j = d.cbegin(); j != d.cend(); ++j) {
            if (max < *j) {
                max = *j;
            }
        }
        cout << max << ' ';
        d.pop_front();
    }
    cout << endl;
}

void printKMax2(int arr[], int n, int k) {
    // works if no dup
    if (n < k) {
        return;
    }

    set<int> s(arr, arr + k - 1);
    cout << s.size() << endl;
    for (int i = k - 1; i < n; ++i) {
        s.insert(arr[i]);
        cout << *(s.crbegin()) << ' ';
        s.erase(arr[i - k + 1]);
    }
    cout << endl;
}

void printKMax3(int arr[], int n, int k) {
    if (n < k) {
        return;
    }

    deque<int> d(arr, arr + k - 1);
    int iMax = 0;
    int max = 0;
    for (int i = k - 1; i < n; ++i) {
        d.push_back(arr[i]);

        if (iMax > (i - k + 1)) {
            if (max < arr[i]) {
                max = arr[i];
            }
        } else {
            max = 0;
            iMax = 0;
            int iDeq = 0;
            for (auto j = d.cbegin(); j != d.cend(); ++j) {
                if (max < *j) {
                    max = *j;
                    iMax = i - k + 1 + iDeq;
                }
                iDeq++;
            }
        }

        cout << max << ' ';
        d.pop_front();
    }
    cout << endl;
}

void printQueue(deque<int> &q) {
    for (auto i = q.cbegin(); i != q.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

void printKMax4(int arr[], int n, int k) {
    deque<int> d(k);
//    printQueue(d);
    int i;
    for (i = 0; i < k; ++i) {
        while ((!d.empty() && arr[i] >= arr[d.back()]))
            d.pop_back();
        d.push_back(i);
//        printQueue(d);
    }
    for (; i < n; ++i) {
        cout << arr[d.front()] << " ";
        while ((!d.empty()) && d.front() <= i - k)
            d.pop_front();
        while ((!d.empty()) && arr[i] >= arr[d.back()])
            d.pop_back();
        d.push_back(i);
    }
    cout << arr[d.front()] << endl;
}

void test21() {
    int i = 1;
    while (i--) {
//    int arr[] = {};
//    int n = 8347;
//    int k = 3418;
    int arr[] = {6, 3, 8, 4, 2, 1, 5, 7, 11, 8};
    int n = 10;
    int k = 4;
    printKMax4(arr, n, k);
    }
}

void test22() {
    int arr[] = {3, 5, 99, 22, 13, 5, 9, 3};
    set<int> s(arr, arr + (sizeof(arr) / sizeof(arr[0])));
    cout << s.size() << endl;
}

void printVector(vector<int> &v) {
    for (auto i = v.cbegin(); i != v.cend(); ++i) {
        cout << *i << " ";
    }
    cout << endl;
}

void test23() {
    vector<int> v;
    v.resize(6);
    cout << v.size() << endl;
    printVector(v);
}

void test24() {
    vector<vector<int>> v = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    cout << v[2][2] << endl;
}

static string storedStr;

string& getName() {
    return storedStr;
}

void test25() {
    cout << "name: " << getName() << endl;

    string c = "test1";
    getName() = c;
    cout << "name: " << getName() << endl;

    int i = 0;
    ++i = 9;
    cout << i << endl;
}

class TestA {
public:
    TestA(int index) {
        _index = index;
        cout << "TeatA " << _index << endl;
    }

    ~TestA() {
        cout << "~TestA " << _index << endl;
    }

    int getIndex() {
        return _index;
    }

private:
    int _index;
};

void normalTestA() {
    TestA* a = new TestA(0);
    delete a;
}

std::unique_ptr<TestA> smartTestA(int i) {
    std::unique_ptr<TestA> ap(new TestA(i));\
    return ap;
}

void takeOwner(std::unique_ptr<TestA> ap) {
    cout << "taking owner of TestA " << ap.get()->getIndex() << endl;
    cout << ap.get() << endl;
}

void test26() {
    cout << "start normal" << endl;
    normalTestA();
    cout << "start smart" << endl;
    std::unique_ptr<TestA> ap = smartTestA(1);
    std::unique_ptr<TestA> apLonger = smartTestA(2);
    auto ap2 = std::move(ap);
    takeOwner(std::move(ap2));
    cout << ap2.get() << endl;

    // odd that the destructor gets called twice!
    takeOwner(std::make_unique<TestA>(TestA(3)));

    cout << "end test26" << endl;
}

void takeArray(int a[], const int n) {
    int i = n;
    while (i--) {
        a[i] = a[i] - 1;
    }
}

void test27() {
    int a[] = {1, 2, 3, 4, 5};

    int i = 5;
    while (i--) {
        cout << a[i] << ' ';
    }
    cout << endl;

    takeArray(a, 5);

    i = 5;
    while (i--) {
        cout << a[i] << ' ';
    }
    cout << endl;
}

void test28() {
    Fireball* fb1 = nullptr;
    delete fb1;
    cout << "live" << endl;
}

/**
 * @brief getFireBall1 in a wrong way
 * @return
 */
unique_ptr<Fireball> getFireBall1() {
    Fireball fb(1);
    unique_ptr<Fireball> fbp(&fb);
    return fbp;
}

/**
 * @brief getFireBall2 in a right way
 * @return
 */
unique_ptr<Fireball> getFireBall2() {
    Fireball* fb = new Fireball(2);
    unique_ptr<Fireball> fbp(fb);
    return fbp;
}

void test29() {
    unique_ptr<Fireball> fbp = getFireBall1();
    fbp.get()->revealFirepower();

    fbp = getFireBall2();
    fbp.get()->revealFirepower();
}

void test30() {
    int *p;
    p = new int(9);

    cout << *p << endl;

    int *pa;
    pa = new int[5];
    *pa = 1;
    *(pa + 1) = 2;
    *(pa + 2) = 3;
    *(pa + 3) = 4;
    *(pa + 4) = 5;
    for (int i = 0; i < 5; ++i) {
        cout << pa[i] << ' ';
    }
    cout << endl;
    *(pa + 5) = 6;
    cout << pa[5] << endl;
    *(pa + 100015) = 6500;
    cout << pa[100015] << endl;
    cout << pa[501] << endl;
}

class SharedMesh {
public:
    SharedMesh(int v) {
        this->m_value = v;
    }
    int getValue() const {
        return m_value;
    }
private:
    int m_value;
};

void test31a() {
    shared_ptr<SharedMesh> sp;
    sp = make_shared<SharedMesh>(33);
    cout << sp.use_count() << ' ' << sp.get() << endl;
    SharedMesh* m = sp.get();
    cout << sp.use_count() << ' ' << sp.get() << endl;
    delete m;
    cout << sp.use_count() << ' ' << sp.get() << endl;
}

void test31b() {
    SharedMesh* m = new SharedMesh(44);
    shared_ptr<SharedMesh> sp = shared_ptr<SharedMesh>(m);
    cout << sp.use_count() << ' ' << sp.get() << endl;
    delete m;
    cout << sp.use_count() << ' ' << sp.get() << endl;
}

void test31() {
    test31a();
}

void output(std::string msg, int const* pInt)
{
    std::cout << msg << *pInt << "\n";
}

void test32()
{
    int* pInt = new int(42);
    std::shared_ptr<int> pShared = std::make_shared<int>(42);

    output("Naked pointer ", pInt);
    cout << pShared << endl;
    output("Shared pointer with get() ", pShared.get());

    delete pInt;
}

void printArray(const int a[], int n) {
    for (int i = 0; i < n; ++i) {
        cout << a[i] << ' ';
    }
    cout << endl;
}

bool reverseF(const int a, const int b) {
    return a > b;
}

void test33() {
    int a[] = {3, 22, 124, 1, 24, 0, -33, 100, 233, -22};
    std::sort(std::begin(a), std::end(a));
    printArray(a, sizeof(a)/sizeof(a[0]));

    struct {
        bool operator()(const int a, const int b) const {
          return a > b;
        }
    } reverse;

    int b[] = {3, 22, 124, 1, 24, 0, -33, 100, 233, -22};
    std::sort(std::begin(b), std::end(b), reverse);
    printArray(b, sizeof(b)/sizeof(b[0]));

    int c[] = {3, 22, 124, 1, 24, 0, -33, 100, 233, -22};
    std::sort(std::begin(c), std::end(c), reverseF);
    printArray(c, sizeof(c)/sizeof(c[0]));

    string msg = "sorting: ";
    int d[] = {3, 22, 124, 1, 24, 0, -33, 100, 233, -22};
    std::sort(std::begin(d), std::end(d), [&msg](const int a, const int b){
        cout << msg << a << " and " << b << endl;
        return a > b;
    });
    msg = "sorting2: ";
    std::sort(std::begin(d), std::end(d), [&msg](const int a, const int b){
        cout << msg << a << " and " << b << endl;
        return a > b;
    });
    printArray(d, sizeof(d)/sizeof(d[0]));

    // ref msg
    const auto compar = [&msg](const int a, const int b) {
        cout << msg << a << " and " << b << endl;
        return a > b;
    };
    std::sort(std::begin(d), std::end(d), compar);
    msg = "sorting3: ";
    std::sort(std::begin(d), std::end(d), compar);
    printArray(d, sizeof(d)/sizeof(d[0]));

    // copy msg
    const auto compar2 = [msg](const int a, const int b) {
        cout << msg << a << " and " << b << endl;
        return a > b;
    };
    std::sort(std::begin(d), std::end(d), compar2);
    msg = "sorting4: ";
    std::sort(std::begin(d), std::end(d), compar2);
    printArray(d, sizeof(d)/sizeof(d[0]));
}


int main() {
    test11();

    return 0;
}
